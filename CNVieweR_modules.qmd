---
title: "CNVieweR Modules"
author: "Elias Schwall"
format: html
---

# Module 1
```{r data upload modules}
library(DT)

# Define UI for data upload module
upload_data_ui <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      fileInput(ns("data"), "Upload CNV data"),
      checkboxInput(ns("data_header"), "Header", TRUE),
      radioButtons(ns("data_sep"), "Separator", c(Comma = ",", Semicolon = ";", Tab = "\t", Space = " "), selected = ",")
    ),
    mainPanel(
      DTOutput(ns("data_table"))
    )
  )
}

# Define server logic for data upload module
upload_data_server <- function(input, output, session) {
  # Reactive expression to store the uploaded data
  uploaded_data <- reactive({
    req(input$data)
    read.csv(input$data$datapath, header = input$data_header, sep = input$data_sep)
  })
  
  # Render the data table immediately after upload
  output$data_table <- renderDT({
    req(uploaded_data()) 
    datatable(uploaded_data(), options = list(pageLength = 10, searchable = TRUE))
  })
  
  # Return the reactive data so it can be used in the plot module
  return(uploaded_data)
}
```

```{r plotting initial heatmap}
library(ggplot2)
library(dplyr)
library(forcats)

# Define UI for the plot generation module
plot_data_ui <- function(id) {
    ns <- NS(id)
    fluidRow(
        column(
            selectInput(ns("population_filter"), "Select Population Groups:",
                        choices = NULL,  # Choices will be populated dynamically
                        multiple = TRUE, 
                        selected = NULL),
            width = 12,  # Use the full width of the page
            plotOutput(ns("data_plot"), height = "100vh")  # Set height to fill the viewport height
        )
    )
}

# Define server logic for the plot generation module
plot_data_server <- function(input, output, session, data) {
    
    # Update the choices for the selectInput dynamically based on the data
    observe({
        req(data())
        populations <- unique(data()$population)
        updateSelectInput(session, "population_filter", choices = populations, selected = populations)
    })
    
    
    
  # Render the plot when the data is available
  output$data_plot <- renderPlot({
    req(data())
    CNV_data <- data()

    
    # Filter the data based on the selected Population groups
    filtered_data <- CNV_data %>%
      filter(population %in% input$population_filter)
    
    ggplot(data = filtered_data, aes(x = reorder(fish, population), y = reorder(cluster, relative_reads), fill = relative_reads)) +
      geom_tile(show.legend = TRUE) +
      theme_minimal() +
      scale_fill_gradient(low = "#01A4A5", high = "#051540") +
      labs(x = "Fish", y = "Cluster", fill = "Relative Depth") +
      facet_wrap(~ population, scales = "free_x", nrow = 1) +
      theme(
        legend.title = element_text(size = 15, face = "bold"),
        legend.text = element_text(size = 10),
        axis.text = element_blank()
      )
  })
}
```


# Module 2
```{r}
# Define UI for the enhanced data upload module
upload_advanced_data_ui <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      fileInput(ns("data"), "Upload your data", accept = c(".csv", ".tsv", ".txt")),
      checkboxInput(ns("data_header"), "Header", TRUE),
      radioButtons(ns("data_sep"), "Separator", 
                   choices = c(Comma = ",", Semicolon = ";", Tab = "\t", Space = " "), 
                   selected = ",")
    ),
    mainPanel(
      DTOutput(ns("data_table"))
    )
  )
}

# Define server logic for the enhanced data upload module
upload_advanced_data_server <- function(input, output, session) {
  # Reactive expression to store the uploaded data
  uploaded_data <- reactive({
    req(input$data)
    read.csv(input$data$datapath, header = input$data_header, sep = input$data_sep)
  })
  
  # Render the data table immediately after upload
  output$data_table <- renderDT({
    req(uploaded_data()) 
    datatable(uploaded_data(), options = list(pageLength = 10, searchable = TRUE))
  })
  
  # Return the reactive data so it can be used in the plot module
  return(uploaded_data)
}
```

```{r}
library(ggplot2)
library(dplyr)
library(forcats)
library(ggbeeswarm)

# Define UI for the enhanced orthocluster plot module
plot_fisnacht_ui <- function(id) {
    ns <- NS(id)
    fluidRow(
        column(
            selectInput(ns("population_filter"), "Select Population Groups:",
                        choices = NULL,  # Choices will be populated dynamically
                        multiple = TRUE, 
                        selected = NULL),
            width = 12,
            plotOutput(ns("fisnacht_plot"), height = "100vh")
        )
    )
}

# Define server logic for the enhanced orthocluster plot module
plot_fisnacht_server <- function(input, output, session, data) {

    processed_data <- reactive({
        req(data())
        data() %>%
            mutate(pop_names = fct_relevel(Population, "TU", "CGN", "DP", "KG", "SN", "CHT")) %>%
            mutate(Exon = factor(Exon, levels = c("B30.2", "FISNACHT", "NLR_B30.2", "other_B30.2")))
    })

    # Update the choices for the population filter dynamically based on the data
    observe({
        req(processed_data())
        populations <- unique(processed_data()$pop_names)
        updateSelectInput(session, "population_filter", choices = populations, selected = populations)
    })

    output$fisnacht_plot <- renderPlot({
        req(processed_data())
        filtered_data <- processed_data() %>%
            filter(pop_names %in% input$population_filter)
        
        ggplot(data = filtered_data[filtered_data$Exon == "FISNACHT",], 
               aes(x = pop_names, y = Orthoclusters, fill = pop_names)) +
            geom_boxplot(outlier.shape = NA, show.legend = FALSE, size = 1) +
            ggbeeswarm::geom_beeswarm(size = 1, show.legend = FALSE) +
            theme_bw() +
            scale_y_continuous(expand = c(0, 0), limits = c(0, 580)) +
            xlab("Population") + ylab("NLR-C genes") +
            scale_fill_manual(values = c("red","orange", "white", "royalblue3","deepskyblue","green")) +
            theme(
                axis.title = element_text(size = 10, face = "bold"),
                axis.text = element_text(size = 10),
                plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
                legend.background = element_rect(colour = "black")
            ) +
            stat_summary(fun = mean, geom = "point", shape = 18, size = 2, color = "black",
                         position = position_dodge2(width = 0.75, preserve = "single"), show.legend = FALSE) +
            geom_vline(xintercept = 2.5, linetype = "dashed", color = "black", linewidth = 2)
    })
}
```

# Module 3
```{r}
# Define UI for the enhanced data upload module
upload_contig_counts_data_ui <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      fileInput(ns("data"), "Upload your data", accept = c(".csv", ".tsv", ".txt")),
      checkboxInput(ns("data_header"), "Header", TRUE),
      radioButtons(ns("data_sep"), "Separator", 
                   choices = c(Comma = ",", Semicolon = ";", Tab = "\t", Space = " "), 
                   selected = ",")
    ),
    mainPanel(
      DTOutput(ns("data_table"))
    )
  )
}

# Define server logic for the enhanced data upload module
upload_contig_counts_data_server <- function(input, output, session) {
  # Reactive expression to store the uploaded data
  uploaded_data <- reactive({
    req(input$data)
    read.csv(input$data$datapath, header = input$data_header, sep = input$data_sep)
  })
  
  # Render the data table immediately after upload
  output$data_table <- renderDT({
    req(uploaded_data()) 
    datatable(uploaded_data(), options = list(pageLength = 10, searchable = TRUE))
  })
  
  # Return the reactive data so it can be used in the plot module
  return(uploaded_data)
}

library(ggplot2)
library(dplyr)
library(forcats)
library(ggbeeswarm)

# Define UI for the enhanced orthocluster plot module
plot_contig_counts_ui <- function(id) {
    ns <- NS(id)
    fluidRow(
        column(
            selectInput(ns("population_filter"), "Select Population Groups:",
                        choices = NULL,  # Choices will be populated dynamically
                        multiple = TRUE, 
                        selected = NULL),
            width = 12,
            plotOutput(ns("contig_counts_plot"), height = "100vh")
        )
    )
}

# Define server logic for the enhanced orthocluster plot module
plot_contig_counts_server <- function(input, output, session, data) {

    processed_data <- reactive({
        req(data())
        data() %>%
  mutate(pop_names = fct_relevel(Population, "TU", "CGN", "DP", "KG", "SN", "CHT"))
    })

    # Update the choices for the population filter dynamically based on the data
    observe({
        req(processed_data())
        populations <- unique(processed_data()$pop_names)
        updateSelectInput(session, "population_filter", choices = populations, selected = populations)
    })

    output$contig_counts_plot <- renderPlot({
        req(processed_data())
        filtered_data <- processed_data() %>%
            filter(pop_names %in% input$population_filter)
        
        ggplot(filtered_data, aes(x = pop_names, y = Contig_Count, fill = Domain)) +
  geom_boxplot(show.legend = F, outlier.shape = NA, size = 1) +
  theme_minimal() +
  ggtitle("Absolute numbers of assembled contigs containing an NLR exon per sequenced individual") +
  scale_fill_manual(values = c("white", "darkgrey")) +
  scale_y_continuous(expand = c(0, 10), limits = c(0, 900)) +
  xlab("Population") + ylab("Contigs") +
  theme(axis.text=element_text(size=10), 
        axis.title=element_text(size=10,face = "bold"),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 10, face = "bold"),
        legend.background = element_rect(colour = "black"),
        axis.text.x = element_blank(),
        plot.title = element_text(size = 15, face = "bold", hjust = 0.5)) +
  stat_summary(fun = mean, geom = "point", shape = 18, size = 3, color = "black",
               position = position_dodge2(width = 0.75, preserve = "single"), show.legend = F) +
  geom_point(aes(x = "TU", y = 378), shape = 24, colour = "black", fill = "darkgrey", size = 4, stroke = 1.5,
             show.legend = F, position = position_nudge(x = 0.2)) +
  geom_point(aes(x = "TU", y = 608), shape = 24, colour = "black", fill = "white", size = 4, stroke = 1.5,
             show.legend = F, position = position_nudge(x = -0.2)) +
  geom_vline(xintercept = 2.5, linetype = "dashed", linewidth = 2)
    })
}
```

# Module 4
```{r}
# Define UI for the enhanced data upload module
upload_contig_length_data_ui <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      fileInput(ns("data"), "Upload your data", accept = c(".csv", ".tsv", ".txt")),
      checkboxInput(ns("data_header"), "Header", TRUE),
      radioButtons(ns("data_sep"), "Separator", 
                   choices = c(Comma = ",", Semicolon = ";", Tab = "\t", Space = " "), 
                   selected = ",")
    ),
    mainPanel(
      DTOutput(ns("data_table"))
    )
  )
}

# Define server logic for the enhanced data upload module
upload_contig_length_data_server <- function(input, output, session) {
  # Reactive expression to store the uploaded data
  uploaded_data <- reactive({
    req(input$data)
    read.csv(input$data$datapath, header = input$data_header, sep = input$data_sep)
  })
  
  # Render the data table immediately after upload
  output$data_table <- renderDT({
    req(uploaded_data()) 
    datatable(uploaded_data(), options = list(pageLength = 10, searchable = TRUE))
  })
  
  # Return the reactive data so it can be used in the plot module
  return(uploaded_data)
}

library(ggplot2)
library(dplyr)
library(forcats)
library(ggbeeswarm)

# Define UI for the enhanced orthocluster plot module
plot_contig_length_ui <- function(id) {
    ns <- NS(id)
    fluidRow(
        column(
            selectInput(ns("population_filter"), "Select Population Groups:",
                        choices = NULL,  # Choices will be populated dynamically
                        multiple = TRUE, 
                        selected = NULL),
            width = 12,
            plotOutput(ns("contig_length_plot"), height = "100vh")
        )
    )
}

# Define server logic for the enhanced orthocluster plot module
plot_contig_length_server <- function(input, output, session, data) {

    processed_data <- reactive({
        req(data())
        data() %>%
  mutate(pop_names = fct_relevel(Population, "TU", "CGN", "DP", "KG", "SN", "CHT"))
    })

    # Update the choices for the population filter dynamically based on the data
    observe({
        req(processed_data())
        populations <- unique(processed_data()$pop_names)
        updateSelectInput(session, "population_filter", choices = populations, selected = populations)
    })

    output$contig_length_plot <- renderPlot({
        req(processed_data())
        filtered_data <- processed_data() %>%
            filter(pop_names %in% input$population_filter)
        
        ggplot(filtered_data, aes(x = pop_names, y = Contig_Length, fill = Domain)) +
  geom_boxplot(show.legend = F, outlier.shape = NA, size = 1) +
  theme_minimal() +
  ggtitle("Lengths of the individual assembled contigs that contain an NLR exon") +
  scale_fill_manual(values = c("white", "darkgrey"), labels = c("B30.2","FISNA-NACHT")) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 10200)) +
  xlab("Population") + ylab("Length [bp]") +
  theme(axis.text=element_text(size=10), 
        axis.title=element_text(size=10,face = "bold"),
        legend.text = element_text(size = 20),
        legend.title = element_text(size = 15, face = "bold", hjust = 0.5),
        legend.background = element_rect(colour = "black")) +
  stat_summary(fun = mean, geom = "point", shape = 18, size = 3, color = "black",
               position = position_dodge2(width = 0.75, preserve = "single"), show.legend = F) +
  geom_vline(xintercept = 2.5, linetype = "dashed", linewidth = 2)
    })
}
```

# Module 5
```{r}
# Define UI for the enhanced data upload module
upload_mapping_ratios_ui <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      fileInput(ns("data"), "Upload your data", accept = c(".csv", ".tsv", ".txt")),
      checkboxInput(ns("data_header"), "Header", TRUE),
      radioButtons(ns("data_sep"), "Separator", 
                   choices = c(Comma = ",", Semicolon = ";", Tab = "\t", Space = " "), 
                   selected = ",")
    ),
    mainPanel(
      DTOutput(ns("data_table"))
    )
  )
}

# Define server logic for the enhanced data upload module
upload_mapping_ratios_server <- function(input, output, session) {
  # Reactive expression to store the uploaded data
  uploaded_data <- reactive({
    req(input$data)
    read.csv(input$data$datapath, header = input$data_header, sep = input$data_sep)
  })
  
  # Render the data table immediately after upload
  output$data_table <- renderDT({
    req(uploaded_data()) 
    datatable(uploaded_data(), options = list(pageLength = 10, searchable = TRUE))
  })
  
  # Return the reactive data so it can be used in the plot module
  return(uploaded_data)
}

library(ggplot2)
library(dplyr)
library(forcats)
library(ggbeeswarm)

# Define UI for the enhanced orthocluster plot module
plot_mapping_ratios_ui <- function(id) {
    ns <- NS(id)
    fluidRow(
        column(
            selectInput(ns("population_filter"), "Select Population Groups:",
                        choices = NULL,  # Choices will be populated dynamically
                        multiple = TRUE, 
                        selected = NULL),
            width = 12,
            plotOutput(ns("mapping_ratios_plot"), height = "100vh")
        )
    )
}

# Define server logic for the enhanced orthocluster plot module
plot_mapping_ratios_server <- function(input, output, session, data) {

    processed_data <- reactive({
        req(data())
        data() %>%
  mutate(pop_names = fct_relevel(Population, "TU", "CGN", "DP", "KG", "SN", "CHT")) %>% 

  mutate(Exon_new = fct_relevel(Exon, "NLR_B30.2", "FISNACHT"))
    })

    # Update the choices for the population filter dynamically based on the data
    observe({
        req(processed_data())
        populations <- unique(processed_data()$pop_names)
        updateSelectInput(session, "population_filter", choices = populations, selected = populations)
    })

    output$mapping_ratios_plot <- renderPlot({
        req(processed_data())
        filtered_data <- processed_data() %>%
            filter(pop_names %in% input$population_filter)



ggplot(filtered_data, aes(x = pop_names, y = Mapping_Ratio, fill = Exon_new)) +
  geom_bar(stat = "identity", position = position_dodge(), colour = "black", show.legend = T, size = 1) +
  theme_bw() +
  scale_fill_manual(values = c("white", "darkgrey"), labels = c("NLR-B30.2", "FISNACHT")) + labs(fill = "Exon") +
  xlab("Population") + ylab("Mapping ratio") +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 1.01)) +
  theme(
    plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
    legend.title = element_text(size = 15, face = "bold", hjust = 0.5),
    legend.text = element_text(size = 10),
    legend.background = element_rect(colour = "black"),
    axis.title = element_text(size = 10, face = "bold"),
    axis.text = element_text(size = 10),
  ) +
  geom_vline(xintercept = 2.5, linetype = "dashed", linewidth = 2)
    })
}
```

# Module 6
```{r}
# Define UI for the enhanced data upload module
upload_mapping_stats_ui <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      fileInput(ns("data"), "Upload your data", accept = c(".csv", ".tsv", ".txt")),
      checkboxInput(ns("data_header"), "Header", TRUE),
      radioButtons(ns("data_sep"), "Separator", 
                   choices = c(Comma = ",", Semicolon = ";", Tab = "\t", Space = " "), 
                   selected = ",")
    ),
    mainPanel(
      DTOutput(ns("data_table"))
    )
  )
}

# Define server logic for the enhanced data upload module
upload_mapping_stats_server <- function(input, output, session) {
  # Reactive expression to store the uploaded data
  uploaded_data <- reactive({
    req(input$data)
    read.csv(input$data$datapath, header = input$data_header, sep = input$data_sep)
  })
  
  # Render the data table immediately after upload
  output$data_table <- renderDT({
    req(uploaded_data()) 
    datatable(uploaded_data(), options = list(pageLength = 10, searchable = TRUE))
  })
  
  # Return the reactive data so it can be used in the plot module
  return(uploaded_data)
}

library(ggplot2)
library(dplyr)
library(forcats)
library(ggbeeswarm)

# Define UI for the enhanced orthocluster plot module
plot_mapping_stats_ui <- function(id) {
    ns <- NS(id)
    fluidRow(
        column(
            width = 12,
            plotOutput(ns("mapping_stats_plot"), height = "100vh")
        )
    )
}

# Define server logic for the enhanced orthocluster plot module
plot_mapping_stats_server <- function(input, output, session, data) {

    processed_data <- reactive({
        req(data())
        data() 
    })
    
    output$mapping_stats_plot <- renderPlot({
        req(processed_data())
        filtered_data <- processed_data()

NLR_mapping_stats = filtered_data

no_none = NLR_mapping_stats[NLR_mapping_stats$Mapping_Quality!="None",]

no_none$Mapping_Quality = as.numeric(no_none$Mapping_Quality)
no_none_reordered = no_none %>%
  mutate(Exon_new = fct_relevel(Exon, "NLR-B30.2", "FISNACHT"))

ggplot(no_none_reordered, aes(x = Mapping_Quality, fill = Exon_new)) +
  geom_histogram(binwidth = 1, position = position_dodge(), colour = "black", show.legend = F, size = 1) +
  theme_bw() +
  scale_fill_manual(values = c("white", "darkgrey"), labels = c("FISNACHT", "NLR-B30.2")) +
  xlab("Mapping quality") + ylab("Unique sequences") +
  scale_x_continuous(expand = c(0, 0), limits = c(-1, 61)) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 820)) +
  theme(
    plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
    legend.title = element_text(size = 15, face = "bold", hjust = 0.5),
    legend.text = element_text(size = 10),
    legend.background = element_rect(colour = "black"),
    axis.title = element_text(size = 15, face = "bold"),
    axis.text = element_text(size = 10),
  )
    })
}
```

# Module 7
```{r}
# Define UI for the enhanced data upload module
upload_pan_NLRome_ui <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(
      fileInput(ns("data"), "Upload your data", accept = c(".csv", ".tsv", ".txt")),
      checkboxInput(ns("data_header"), "Header", TRUE),
      radioButtons(ns("data_sep"), "Separator", 
                   choices = c(Comma = ",", Semicolon = ";", Tab = "\t", Space = " "), 
                   selected = ",")
    ),
    mainPanel(
      DTOutput(ns("data_table"))
    )
  )
}

# Define server logic for the enhanced data upload module
upload_pan_NLRome_server <- function(input, output, session) {
  # Reactive expression to store the uploaded data
  uploaded_data <- reactive({
    req(input$data)
    read.csv(input$data$datapath, header = input$data_header, sep = input$data_sep)
  })
  
  # Render the data table immediately after upload
  output$data_table <- renderDT({
    req(uploaded_data()) 
    datatable(uploaded_data(), options = list(pageLength = 10, searchable = TRUE))
  })
  
  # Return the reactive data so it can be used in the plot module
  return(uploaded_data)
}

library(ggplot2)
library(dplyr)
library(forcats)
library(ggbeeswarm)

# Define UI for the enhanced orthocluster plot module
plot_pan_NLRome_ui <- function(id) {
    ns <- NS(id)
    fluidRow(
        column(
            width = 12,
            plotOutput(ns("pan_NLRome_plot"), height = "100vh")
        )
    )
}

# Define server logic for the enhanced orthocluster plot module
plot_pan_NLRome_server <- function(input, output, session, data) {

    processed_data <- reactive({
        req(data())
        data() 
    })
    
    output$pan_NLRome_plot <- renderPlot({
        req(processed_data())
        filtered_data <- processed_data()

scale = c(0,0.2,0.4,0.6,0.8,1)

ggplot(data = filtered_data, aes(x = percentage_of_fish, y = orthoclusters_found)) +
  geom_point(size = 3) +
  geom_smooth(linewidth = 2, colour = "black", method = "loess", level = 0.95) +
  theme_bw() +
  scale_y_continuous(expand = c(0,0), limits = c(0,90)) +
  scale_x_continuous(expand = c(0,0), limits = c(0,1), labels = scale, breaks = scale) +
  xlab("Relative Amount of Fish") + ylab("NLR Genes") +
  geom_vline(xintercept = 0.2) + geom_vline(xintercept = 0.8) +
  theme(
    axis.title = element_text(size = 15, face = "bold"),
    axis.text = element_text(size = 10)
  )
    })
}
```